syntax = "proto3";

option go_package = "github.com/rbroggi/faceittha/pkg/sdk/v1";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

// The user service definition.
service UserService {
  // Creates a new user.
  //
  // The user ID will be generated by the server and returned in the response.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }
  
  // Updates an existing user.
  //
  // The ID of the user to update should be included in the user object.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/users/{id}"
      body: "*"
    };
  }
  
  // Removes a user.
  rpc RemoveUser(RemoveUserRequest) returns (RemoveUserResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{id}"
    };
  }
  
  // Lists users matching certain filtering criteria.
  //
  // Supports pagination using the page_size and page_token fields in the request.
 // ListUsers returns a list of user accounts matching the specified criteria.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }
}

// A user object.
message User {
  // The ID of the user.
  //
  // This field should be omitted during creation since the server will generate it.
  string id = 1 [(validate.rules).string.uuid = true];
  
  // The first name of the user.
  string first_name = 2 [(validate.rules).string = {
    max_bytes: 256,
  }];
  
  // The last name of the user.
  string last_name = 3 [(validate.rules).string = {
    max_bytes: 256,
  }];
  
  // The user's nickname.
  string nickname = 4 [(validate.rules).string = {
    max_bytes: 256,
  }];
  
  // The user's email address.
  string email = 6 [(validate.rules).string.email = true];
  
  // The user's country.
  string country = 7 [(validate.rules).string = {in: ["AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"]}];
  
  // The timestamp when the user was created.
  google.protobuf.Timestamp created_at = 8;
  
  // The timestamp when the user was last updated.
  google.protobuf.Timestamp updated_at = 9;
}

message UserEvent {
  // user state before the event
  //
  // if empty it is a deletion event
  optional User before = 1;

  // user state after the event
  //
  // if empty it is a creation event
  optional User after = 2;
}

// The request message for the CreateUser method.
message CreateUserRequest {
  // The first name of the user.
  string first_name = 1 [(validate.rules).string = {
    max_bytes: 256,
  }];
  
  // The last name of the user.
  string last_name = 2 [(validate.rules).string = {
    max_bytes: 256,
  }];
  
  // The user's nickname.
  string nickname = 3 [(validate.rules).string = {
    max_bytes: 256,
  }];
    
  // The user's password.
  //
  // This field should never be returned in responses.
  string password = 4 [(validate.rules).string = {min_len: 8, max_len: 20}];
  
  // The user's email address.
  string email = 5 [(validate.rules).string.email = true];
  
  // The user's country.
  string country = 6  [(validate.rules).string = {in: ["AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"]}];
}

// The response message for the CreateUser method.
message CreateUserResponse {
  // user is the created user
  User user = 1;
}

// The request message for the UpdateUser method.
message UpdateUserRequest {
  // The ID of the user.
  //
  // This field should be omitted during creation since the server will generate it.
  string id = 1 [(validate.rules).string.uuid = true];
  
  // The first name of the user.
  string first_name = 2 [(validate.rules).string = {
    max_bytes: 256,
    ignore_empty: true,
  }];
  
  // The last name of the user.
  string last_name = 3 [(validate.rules).string = {
    max_bytes: 256,
    ignore_empty: true,
  }];
  
  // The user's nickname.
  string nickname = 4 [(validate.rules).string = {
    max_bytes: 256,
    ignore_empty: true,
  }];
  
  // The user's email address.
  string email = 6 [(validate.rules).string = {
    email: true,
    ignore_empty: true,
  }];
  
  // The user's country.
  string country = 7 [(validate.rules).string = {
    in: ["AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"],
    ignore_empty: true,
  }];
  
}

// The response message for the UpdateUser method.
message UpdateUserResponse {
  // The updated user data.
  //
  // The ID of the user to update should be included in this object.
  User user = 1;
}

// The request message for the RemoveUser method.
message RemoveUserRequest {
  // The ID of the user to remove.
  string id = 1 [(validate.rules).string.uuid = true];

  // if true, user data will be hard-deleted from the system, 
  // otherwise user-data is kept for auditing purpose.
  bool hard_delete = 2;
}

// The response message for the RemoveUser method.
message RemoveUserResponse {}

// The request message for the ListUsers method.
message ListUsersRequest {
  // The maximum number of users to return per page.
  //
  // 0 assumes meaning of unbound page-limit.
  uint32 page_size = 1;
  
  // The offset of users already returned
  uint32 offset = 2;
  
  // The countries for which the list of users must belong to.
  //
  // This field is optional.
  repeated string countries = 3 [(validate.rules).repeated.unique = true];

  // Left time-boundary of the interval at which the user was created
  //
  // This field is optional
  google.protobuf.Timestamp created_after = 4;

  // Right time-boundary of the interval at which the user was created
  //
  // This field is optional
  google.protobuf.Timestamp created_before = 5;
}

// ListUsersResponse is the response message for the ListUsers method.
message ListUsersResponse {
  repeated User users = 1;              // Array of user accounts matching the filtering criteria.
}
