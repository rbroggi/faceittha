// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: user.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A user object.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user.
	//
	// This field should be omitted during creation since the server will generate it.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The first name of the user.
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name of the user.
	LastName string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The user's nickname.
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// The user's email address.
	Email string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	// The user's country.
	Country string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	// The timestamp when the user was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The timestamp when the user was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user state before the event
	//
	// if empty it is a deletion event
	Before *User `protobuf:"bytes,1,opt,name=before,proto3,oneof" json:"before,omitempty"`
	// user state after the event
	//
	// if empty it is a creation event
	After *User `protobuf:"bytes,2,opt,name=after,proto3,oneof" json:"after,omitempty"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *UserEvent) GetBefore() *User {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *UserEvent) GetAfter() *User {
	if x != nil {
		return x.After
	}
	return nil
}

// The request message for the CreateUser method.
type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first name of the user.
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name of the user.
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The user's nickname.
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// The user's password.
	//
	// This field should never be returned in responses.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// The user's email address.
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// The user's country.
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *CreateUserRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreateUserRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreateUserRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// The response message for the CreateUser method.
type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the created user
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *CreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// The request message for the UpdateUser method.
type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user.
	//
	// This field should be omitted during creation since the server will generate it.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The first name of the user.
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name of the user.
	LastName string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The user's nickname.
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// The user's email address.
	Email string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	// The user's country.
	Country string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateUserRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateUserRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UpdateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// The response message for the UpdateUser method.
type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated user data.
	//
	// The ID of the user to update should be included in this object.
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// The request message for the RemoveUser method.
type RemoveUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user to remove.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// if true, user data will be hard-deleted from the system,
	// otherwise user-data is kept for auditing purpose.
	HardDelete bool `protobuf:"varint,2,opt,name=hard_delete,json=hardDelete,proto3" json:"hard_delete,omitempty"`
}

func (x *RemoveUserRequest) Reset() {
	*x = RemoveUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserRequest) ProtoMessage() {}

func (x *RemoveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoveUserRequest) GetHardDelete() bool {
	if x != nil {
		return x.HardDelete
	}
	return false
}

// The response message for the RemoveUser method.
type RemoveUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveUserResponse) Reset() {
	*x = RemoveUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserResponse) ProtoMessage() {}

func (x *RemoveUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{7}
}

// The request message for the ListUsers method.
type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of users to return per page.
	//
	// 0 assumes meaning of unbound page-limit.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The offset of users already returned
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The countries for which the list of users must belong to.
	//
	// This field is optional.
	Countries []string `protobuf:"bytes,3,rep,name=countries,proto3" json:"countries,omitempty"`
	// Left time-boundary of the interval at which the user was created
	//
	// This field is optional
	CreatedAfter *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	// Right time-boundary of the interval at which the user was created
	//
	// This field is optional
	CreatedBefore *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{8}
}

func (x *ListUsersRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUsersRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListUsersRequest) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *ListUsersRequest) GetCreatedAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAfter
	}
	return nil
}

func (x *ListUsersRequest) GetCreatedBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedBefore
	}
	return nil
}

// ListUsersResponse is the response message for the ListUsers method.
type ListUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"` // Array of user accounts matching the filtering criteria.
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{9}
}

func (x *ListUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x0a, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x02, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x28, 0x80, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x02, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x86, 0x08, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xeb, 0x07, 0xfa, 0x42, 0xe7, 0x07, 0x72, 0xe4, 0x07, 0x52, 0x02,
	0x41, 0x44, 0x52, 0x02, 0x41, 0x45, 0x52, 0x02, 0x41, 0x46, 0x52, 0x02, 0x41, 0x47, 0x52, 0x02,
	0x41, 0x49, 0x52, 0x02, 0x41, 0x4c, 0x52, 0x02, 0x41, 0x4d, 0x52, 0x02, 0x41, 0x4f, 0x52, 0x02,
	0x41, 0x51, 0x52, 0x02, 0x41, 0x52, 0x52, 0x02, 0x41, 0x53, 0x52, 0x02, 0x41, 0x54, 0x52, 0x02,
	0x41, 0x55, 0x52, 0x02, 0x41, 0x57, 0x52, 0x02, 0x41, 0x58, 0x52, 0x02, 0x41, 0x5a, 0x52, 0x02,
	0x42, 0x41, 0x52, 0x02, 0x42, 0x42, 0x52, 0x02, 0x42, 0x44, 0x52, 0x02, 0x42, 0x45, 0x52, 0x02,
	0x42, 0x46, 0x52, 0x02, 0x42, 0x47, 0x52, 0x02, 0x42, 0x48, 0x52, 0x02, 0x42, 0x49, 0x52, 0x02,
	0x42, 0x4a, 0x52, 0x02, 0x42, 0x4c, 0x52, 0x02, 0x42, 0x4d, 0x52, 0x02, 0x42, 0x4e, 0x52, 0x02,
	0x42, 0x4f, 0x52, 0x02, 0x42, 0x51, 0x52, 0x02, 0x42, 0x52, 0x52, 0x02, 0x42, 0x53, 0x52, 0x02,
	0x42, 0x54, 0x52, 0x02, 0x42, 0x56, 0x52, 0x02, 0x42, 0x57, 0x52, 0x02, 0x42, 0x59, 0x52, 0x02,
	0x42, 0x5a, 0x52, 0x02, 0x43, 0x41, 0x52, 0x02, 0x43, 0x43, 0x52, 0x02, 0x43, 0x44, 0x52, 0x02,
	0x43, 0x46, 0x52, 0x02, 0x43, 0x47, 0x52, 0x02, 0x43, 0x48, 0x52, 0x02, 0x43, 0x49, 0x52, 0x02,
	0x43, 0x4b, 0x52, 0x02, 0x43, 0x4c, 0x52, 0x02, 0x43, 0x4d, 0x52, 0x02, 0x43, 0x4e, 0x52, 0x02,
	0x43, 0x4f, 0x52, 0x02, 0x43, 0x52, 0x52, 0x02, 0x43, 0x55, 0x52, 0x02, 0x43, 0x56, 0x52, 0x02,
	0x43, 0x57, 0x52, 0x02, 0x43, 0x58, 0x52, 0x02, 0x43, 0x59, 0x52, 0x02, 0x43, 0x5a, 0x52, 0x02,
	0x44, 0x45, 0x52, 0x02, 0x44, 0x4a, 0x52, 0x02, 0x44, 0x4b, 0x52, 0x02, 0x44, 0x4d, 0x52, 0x02,
	0x44, 0x4f, 0x52, 0x02, 0x44, 0x5a, 0x52, 0x02, 0x45, 0x43, 0x52, 0x02, 0x45, 0x45, 0x52, 0x02,
	0x45, 0x47, 0x52, 0x02, 0x45, 0x48, 0x52, 0x02, 0x45, 0x52, 0x52, 0x02, 0x45, 0x53, 0x52, 0x02,
	0x45, 0x54, 0x52, 0x02, 0x46, 0x49, 0x52, 0x02, 0x46, 0x4a, 0x52, 0x02, 0x46, 0x4b, 0x52, 0x02,
	0x46, 0x4d, 0x52, 0x02, 0x46, 0x4f, 0x52, 0x02, 0x46, 0x52, 0x52, 0x02, 0x47, 0x41, 0x52, 0x02,
	0x47, 0x42, 0x52, 0x02, 0x47, 0x44, 0x52, 0x02, 0x47, 0x45, 0x52, 0x02, 0x47, 0x46, 0x52, 0x02,
	0x47, 0x47, 0x52, 0x02, 0x47, 0x48, 0x52, 0x02, 0x47, 0x49, 0x52, 0x02, 0x47, 0x4c, 0x52, 0x02,
	0x47, 0x4d, 0x52, 0x02, 0x47, 0x4e, 0x52, 0x02, 0x47, 0x50, 0x52, 0x02, 0x47, 0x51, 0x52, 0x02,
	0x47, 0x52, 0x52, 0x02, 0x47, 0x53, 0x52, 0x02, 0x47, 0x54, 0x52, 0x02, 0x47, 0x55, 0x52, 0x02,
	0x47, 0x57, 0x52, 0x02, 0x47, 0x59, 0x52, 0x02, 0x48, 0x4b, 0x52, 0x02, 0x48, 0x4d, 0x52, 0x02,
	0x48, 0x4e, 0x52, 0x02, 0x48, 0x52, 0x52, 0x02, 0x48, 0x54, 0x52, 0x02, 0x48, 0x55, 0x52, 0x02,
	0x49, 0x44, 0x52, 0x02, 0x49, 0x45, 0x52, 0x02, 0x49, 0x4c, 0x52, 0x02, 0x49, 0x4d, 0x52, 0x02,
	0x49, 0x4e, 0x52, 0x02, 0x49, 0x4f, 0x52, 0x02, 0x49, 0x51, 0x52, 0x02, 0x49, 0x52, 0x52, 0x02,
	0x49, 0x53, 0x52, 0x02, 0x49, 0x54, 0x52, 0x02, 0x4a, 0x45, 0x52, 0x02, 0x4a, 0x4d, 0x52, 0x02,
	0x4a, 0x4f, 0x52, 0x02, 0x4a, 0x50, 0x52, 0x02, 0x4b, 0x45, 0x52, 0x02, 0x4b, 0x47, 0x52, 0x02,
	0x4b, 0x48, 0x52, 0x02, 0x4b, 0x49, 0x52, 0x02, 0x4b, 0x4d, 0x52, 0x02, 0x4b, 0x4e, 0x52, 0x02,
	0x4b, 0x50, 0x52, 0x02, 0x4b, 0x52, 0x52, 0x02, 0x4b, 0x57, 0x52, 0x02, 0x4b, 0x59, 0x52, 0x02,
	0x4b, 0x5a, 0x52, 0x02, 0x4c, 0x41, 0x52, 0x02, 0x4c, 0x42, 0x52, 0x02, 0x4c, 0x43, 0x52, 0x02,
	0x4c, 0x49, 0x52, 0x02, 0x4c, 0x4b, 0x52, 0x02, 0x4c, 0x52, 0x52, 0x02, 0x4c, 0x53, 0x52, 0x02,
	0x4c, 0x54, 0x52, 0x02, 0x4c, 0x55, 0x52, 0x02, 0x4c, 0x56, 0x52, 0x02, 0x4c, 0x59, 0x52, 0x02,
	0x4d, 0x41, 0x52, 0x02, 0x4d, 0x43, 0x52, 0x02, 0x4d, 0x44, 0x52, 0x02, 0x4d, 0x45, 0x52, 0x02,
	0x4d, 0x46, 0x52, 0x02, 0x4d, 0x47, 0x52, 0x02, 0x4d, 0x48, 0x52, 0x02, 0x4d, 0x4b, 0x52, 0x02,
	0x4d, 0x4c, 0x52, 0x02, 0x4d, 0x4d, 0x52, 0x02, 0x4d, 0x4e, 0x52, 0x02, 0x4d, 0x4f, 0x52, 0x02,
	0x4d, 0x50, 0x52, 0x02, 0x4d, 0x51, 0x52, 0x02, 0x4d, 0x52, 0x52, 0x02, 0x4d, 0x53, 0x52, 0x02,
	0x4d, 0x54, 0x52, 0x02, 0x4d, 0x55, 0x52, 0x02, 0x4d, 0x56, 0x52, 0x02, 0x4d, 0x57, 0x52, 0x02,
	0x4d, 0x58, 0x52, 0x02, 0x4d, 0x59, 0x52, 0x02, 0x4d, 0x5a, 0x52, 0x02, 0x4e, 0x41, 0x52, 0x02,
	0x4e, 0x43, 0x52, 0x02, 0x4e, 0x45, 0x52, 0x02, 0x4e, 0x46, 0x52, 0x02, 0x4e, 0x47, 0x52, 0x02,
	0x4e, 0x49, 0x52, 0x02, 0x4e, 0x4c, 0x52, 0x02, 0x4e, 0x4f, 0x52, 0x02, 0x4e, 0x50, 0x52, 0x02,
	0x4e, 0x52, 0x52, 0x02, 0x4e, 0x55, 0x52, 0x02, 0x4e, 0x5a, 0x52, 0x02, 0x4f, 0x4d, 0x52, 0x02,
	0x50, 0x41, 0x52, 0x02, 0x50, 0x45, 0x52, 0x02, 0x50, 0x46, 0x52, 0x02, 0x50, 0x47, 0x52, 0x02,
	0x50, 0x48, 0x52, 0x02, 0x50, 0x4b, 0x52, 0x02, 0x50, 0x4c, 0x52, 0x02, 0x50, 0x4d, 0x52, 0x02,
	0x50, 0x4e, 0x52, 0x02, 0x50, 0x52, 0x52, 0x02, 0x50, 0x53, 0x52, 0x02, 0x50, 0x54, 0x52, 0x02,
	0x50, 0x57, 0x52, 0x02, 0x50, 0x59, 0x52, 0x02, 0x51, 0x41, 0x52, 0x02, 0x52, 0x45, 0x52, 0x02,
	0x52, 0x4f, 0x52, 0x02, 0x52, 0x53, 0x52, 0x02, 0x52, 0x55, 0x52, 0x02, 0x52, 0x57, 0x52, 0x02,
	0x53, 0x41, 0x52, 0x02, 0x53, 0x42, 0x52, 0x02, 0x53, 0x43, 0x52, 0x02, 0x53, 0x44, 0x52, 0x02,
	0x53, 0x45, 0x52, 0x02, 0x53, 0x47, 0x52, 0x02, 0x53, 0x48, 0x52, 0x02, 0x53, 0x49, 0x52, 0x02,
	0x53, 0x4a, 0x52, 0x02, 0x53, 0x4b, 0x52, 0x02, 0x53, 0x4c, 0x52, 0x02, 0x53, 0x4d, 0x52, 0x02,
	0x53, 0x4e, 0x52, 0x02, 0x53, 0x4f, 0x52, 0x02, 0x53, 0x52, 0x52, 0x02, 0x53, 0x53, 0x52, 0x02,
	0x53, 0x54, 0x52, 0x02, 0x53, 0x56, 0x52, 0x02, 0x53, 0x58, 0x52, 0x02, 0x53, 0x59, 0x52, 0x02,
	0x53, 0x5a, 0x52, 0x02, 0x54, 0x43, 0x52, 0x02, 0x54, 0x44, 0x52, 0x02, 0x54, 0x46, 0x52, 0x02,
	0x54, 0x47, 0x52, 0x02, 0x54, 0x48, 0x52, 0x02, 0x54, 0x4a, 0x52, 0x02, 0x54, 0x4b, 0x52, 0x02,
	0x54, 0x4c, 0x52, 0x02, 0x54, 0x4d, 0x52, 0x02, 0x54, 0x4e, 0x52, 0x02, 0x54, 0x4f, 0x52, 0x02,
	0x54, 0x52, 0x52, 0x02, 0x54, 0x54, 0x52, 0x02, 0x54, 0x56, 0x52, 0x02, 0x54, 0x57, 0x52, 0x02,
	0x54, 0x5a, 0x52, 0x02, 0x55, 0x41, 0x52, 0x02, 0x55, 0x47, 0x52, 0x02, 0x55, 0x4d, 0x52, 0x02,
	0x55, 0x53, 0x52, 0x02, 0x55, 0x59, 0x52, 0x02, 0x55, 0x5a, 0x52, 0x02, 0x56, 0x41, 0x52, 0x02,
	0x56, 0x43, 0x52, 0x02, 0x56, 0x45, 0x52, 0x02, 0x56, 0x47, 0x52, 0x02, 0x56, 0x49, 0x52, 0x02,
	0x56, 0x4e, 0x52, 0x02, 0x56, 0x55, 0x52, 0x02, 0x57, 0x46, 0x52, 0x02, 0x57, 0x53, 0x52, 0x02,
	0x59, 0x45, 0x52, 0x02, 0x59, 0x54, 0x52, 0x02, 0x5a, 0x41, 0x52, 0x02, 0x5a, 0x4d, 0x52, 0x02,
	0x5a, 0x57, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x66, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x01, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xd8, 0x09, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x02, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x28, 0x80, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x02, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x08,
	0x18, 0x14, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x86, 0x08, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0xeb, 0x07,
	0xfa, 0x42, 0xe7, 0x07, 0x72, 0xe4, 0x07, 0x52, 0x02, 0x41, 0x44, 0x52, 0x02, 0x41, 0x45, 0x52,
	0x02, 0x41, 0x46, 0x52, 0x02, 0x41, 0x47, 0x52, 0x02, 0x41, 0x49, 0x52, 0x02, 0x41, 0x4c, 0x52,
	0x02, 0x41, 0x4d, 0x52, 0x02, 0x41, 0x4f, 0x52, 0x02, 0x41, 0x51, 0x52, 0x02, 0x41, 0x52, 0x52,
	0x02, 0x41, 0x53, 0x52, 0x02, 0x41, 0x54, 0x52, 0x02, 0x41, 0x55, 0x52, 0x02, 0x41, 0x57, 0x52,
	0x02, 0x41, 0x58, 0x52, 0x02, 0x41, 0x5a, 0x52, 0x02, 0x42, 0x41, 0x52, 0x02, 0x42, 0x42, 0x52,
	0x02, 0x42, 0x44, 0x52, 0x02, 0x42, 0x45, 0x52, 0x02, 0x42, 0x46, 0x52, 0x02, 0x42, 0x47, 0x52,
	0x02, 0x42, 0x48, 0x52, 0x02, 0x42, 0x49, 0x52, 0x02, 0x42, 0x4a, 0x52, 0x02, 0x42, 0x4c, 0x52,
	0x02, 0x42, 0x4d, 0x52, 0x02, 0x42, 0x4e, 0x52, 0x02, 0x42, 0x4f, 0x52, 0x02, 0x42, 0x51, 0x52,
	0x02, 0x42, 0x52, 0x52, 0x02, 0x42, 0x53, 0x52, 0x02, 0x42, 0x54, 0x52, 0x02, 0x42, 0x56, 0x52,
	0x02, 0x42, 0x57, 0x52, 0x02, 0x42, 0x59, 0x52, 0x02, 0x42, 0x5a, 0x52, 0x02, 0x43, 0x41, 0x52,
	0x02, 0x43, 0x43, 0x52, 0x02, 0x43, 0x44, 0x52, 0x02, 0x43, 0x46, 0x52, 0x02, 0x43, 0x47, 0x52,
	0x02, 0x43, 0x48, 0x52, 0x02, 0x43, 0x49, 0x52, 0x02, 0x43, 0x4b, 0x52, 0x02, 0x43, 0x4c, 0x52,
	0x02, 0x43, 0x4d, 0x52, 0x02, 0x43, 0x4e, 0x52, 0x02, 0x43, 0x4f, 0x52, 0x02, 0x43, 0x52, 0x52,
	0x02, 0x43, 0x55, 0x52, 0x02, 0x43, 0x56, 0x52, 0x02, 0x43, 0x57, 0x52, 0x02, 0x43, 0x58, 0x52,
	0x02, 0x43, 0x59, 0x52, 0x02, 0x43, 0x5a, 0x52, 0x02, 0x44, 0x45, 0x52, 0x02, 0x44, 0x4a, 0x52,
	0x02, 0x44, 0x4b, 0x52, 0x02, 0x44, 0x4d, 0x52, 0x02, 0x44, 0x4f, 0x52, 0x02, 0x44, 0x5a, 0x52,
	0x02, 0x45, 0x43, 0x52, 0x02, 0x45, 0x45, 0x52, 0x02, 0x45, 0x47, 0x52, 0x02, 0x45, 0x48, 0x52,
	0x02, 0x45, 0x52, 0x52, 0x02, 0x45, 0x53, 0x52, 0x02, 0x45, 0x54, 0x52, 0x02, 0x46, 0x49, 0x52,
	0x02, 0x46, 0x4a, 0x52, 0x02, 0x46, 0x4b, 0x52, 0x02, 0x46, 0x4d, 0x52, 0x02, 0x46, 0x4f, 0x52,
	0x02, 0x46, 0x52, 0x52, 0x02, 0x47, 0x41, 0x52, 0x02, 0x47, 0x42, 0x52, 0x02, 0x47, 0x44, 0x52,
	0x02, 0x47, 0x45, 0x52, 0x02, 0x47, 0x46, 0x52, 0x02, 0x47, 0x47, 0x52, 0x02, 0x47, 0x48, 0x52,
	0x02, 0x47, 0x49, 0x52, 0x02, 0x47, 0x4c, 0x52, 0x02, 0x47, 0x4d, 0x52, 0x02, 0x47, 0x4e, 0x52,
	0x02, 0x47, 0x50, 0x52, 0x02, 0x47, 0x51, 0x52, 0x02, 0x47, 0x52, 0x52, 0x02, 0x47, 0x53, 0x52,
	0x02, 0x47, 0x54, 0x52, 0x02, 0x47, 0x55, 0x52, 0x02, 0x47, 0x57, 0x52, 0x02, 0x47, 0x59, 0x52,
	0x02, 0x48, 0x4b, 0x52, 0x02, 0x48, 0x4d, 0x52, 0x02, 0x48, 0x4e, 0x52, 0x02, 0x48, 0x52, 0x52,
	0x02, 0x48, 0x54, 0x52, 0x02, 0x48, 0x55, 0x52, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x45, 0x52,
	0x02, 0x49, 0x4c, 0x52, 0x02, 0x49, 0x4d, 0x52, 0x02, 0x49, 0x4e, 0x52, 0x02, 0x49, 0x4f, 0x52,
	0x02, 0x49, 0x51, 0x52, 0x02, 0x49, 0x52, 0x52, 0x02, 0x49, 0x53, 0x52, 0x02, 0x49, 0x54, 0x52,
	0x02, 0x4a, 0x45, 0x52, 0x02, 0x4a, 0x4d, 0x52, 0x02, 0x4a, 0x4f, 0x52, 0x02, 0x4a, 0x50, 0x52,
	0x02, 0x4b, 0x45, 0x52, 0x02, 0x4b, 0x47, 0x52, 0x02, 0x4b, 0x48, 0x52, 0x02, 0x4b, 0x49, 0x52,
	0x02, 0x4b, 0x4d, 0x52, 0x02, 0x4b, 0x4e, 0x52, 0x02, 0x4b, 0x50, 0x52, 0x02, 0x4b, 0x52, 0x52,
	0x02, 0x4b, 0x57, 0x52, 0x02, 0x4b, 0x59, 0x52, 0x02, 0x4b, 0x5a, 0x52, 0x02, 0x4c, 0x41, 0x52,
	0x02, 0x4c, 0x42, 0x52, 0x02, 0x4c, 0x43, 0x52, 0x02, 0x4c, 0x49, 0x52, 0x02, 0x4c, 0x4b, 0x52,
	0x02, 0x4c, 0x52, 0x52, 0x02, 0x4c, 0x53, 0x52, 0x02, 0x4c, 0x54, 0x52, 0x02, 0x4c, 0x55, 0x52,
	0x02, 0x4c, 0x56, 0x52, 0x02, 0x4c, 0x59, 0x52, 0x02, 0x4d, 0x41, 0x52, 0x02, 0x4d, 0x43, 0x52,
	0x02, 0x4d, 0x44, 0x52, 0x02, 0x4d, 0x45, 0x52, 0x02, 0x4d, 0x46, 0x52, 0x02, 0x4d, 0x47, 0x52,
	0x02, 0x4d, 0x48, 0x52, 0x02, 0x4d, 0x4b, 0x52, 0x02, 0x4d, 0x4c, 0x52, 0x02, 0x4d, 0x4d, 0x52,
	0x02, 0x4d, 0x4e, 0x52, 0x02, 0x4d, 0x4f, 0x52, 0x02, 0x4d, 0x50, 0x52, 0x02, 0x4d, 0x51, 0x52,
	0x02, 0x4d, 0x52, 0x52, 0x02, 0x4d, 0x53, 0x52, 0x02, 0x4d, 0x54, 0x52, 0x02, 0x4d, 0x55, 0x52,
	0x02, 0x4d, 0x56, 0x52, 0x02, 0x4d, 0x57, 0x52, 0x02, 0x4d, 0x58, 0x52, 0x02, 0x4d, 0x59, 0x52,
	0x02, 0x4d, 0x5a, 0x52, 0x02, 0x4e, 0x41, 0x52, 0x02, 0x4e, 0x43, 0x52, 0x02, 0x4e, 0x45, 0x52,
	0x02, 0x4e, 0x46, 0x52, 0x02, 0x4e, 0x47, 0x52, 0x02, 0x4e, 0x49, 0x52, 0x02, 0x4e, 0x4c, 0x52,
	0x02, 0x4e, 0x4f, 0x52, 0x02, 0x4e, 0x50, 0x52, 0x02, 0x4e, 0x52, 0x52, 0x02, 0x4e, 0x55, 0x52,
	0x02, 0x4e, 0x5a, 0x52, 0x02, 0x4f, 0x4d, 0x52, 0x02, 0x50, 0x41, 0x52, 0x02, 0x50, 0x45, 0x52,
	0x02, 0x50, 0x46, 0x52, 0x02, 0x50, 0x47, 0x52, 0x02, 0x50, 0x48, 0x52, 0x02, 0x50, 0x4b, 0x52,
	0x02, 0x50, 0x4c, 0x52, 0x02, 0x50, 0x4d, 0x52, 0x02, 0x50, 0x4e, 0x52, 0x02, 0x50, 0x52, 0x52,
	0x02, 0x50, 0x53, 0x52, 0x02, 0x50, 0x54, 0x52, 0x02, 0x50, 0x57, 0x52, 0x02, 0x50, 0x59, 0x52,
	0x02, 0x51, 0x41, 0x52, 0x02, 0x52, 0x45, 0x52, 0x02, 0x52, 0x4f, 0x52, 0x02, 0x52, 0x53, 0x52,
	0x02, 0x52, 0x55, 0x52, 0x02, 0x52, 0x57, 0x52, 0x02, 0x53, 0x41, 0x52, 0x02, 0x53, 0x42, 0x52,
	0x02, 0x53, 0x43, 0x52, 0x02, 0x53, 0x44, 0x52, 0x02, 0x53, 0x45, 0x52, 0x02, 0x53, 0x47, 0x52,
	0x02, 0x53, 0x48, 0x52, 0x02, 0x53, 0x49, 0x52, 0x02, 0x53, 0x4a, 0x52, 0x02, 0x53, 0x4b, 0x52,
	0x02, 0x53, 0x4c, 0x52, 0x02, 0x53, 0x4d, 0x52, 0x02, 0x53, 0x4e, 0x52, 0x02, 0x53, 0x4f, 0x52,
	0x02, 0x53, 0x52, 0x52, 0x02, 0x53, 0x53, 0x52, 0x02, 0x53, 0x54, 0x52, 0x02, 0x53, 0x56, 0x52,
	0x02, 0x53, 0x58, 0x52, 0x02, 0x53, 0x59, 0x52, 0x02, 0x53, 0x5a, 0x52, 0x02, 0x54, 0x43, 0x52,
	0x02, 0x54, 0x44, 0x52, 0x02, 0x54, 0x46, 0x52, 0x02, 0x54, 0x47, 0x52, 0x02, 0x54, 0x48, 0x52,
	0x02, 0x54, 0x4a, 0x52, 0x02, 0x54, 0x4b, 0x52, 0x02, 0x54, 0x4c, 0x52, 0x02, 0x54, 0x4d, 0x52,
	0x02, 0x54, 0x4e, 0x52, 0x02, 0x54, 0x4f, 0x52, 0x02, 0x54, 0x52, 0x52, 0x02, 0x54, 0x54, 0x52,
	0x02, 0x54, 0x56, 0x52, 0x02, 0x54, 0x57, 0x52, 0x02, 0x54, 0x5a, 0x52, 0x02, 0x55, 0x41, 0x52,
	0x02, 0x55, 0x47, 0x52, 0x02, 0x55, 0x4d, 0x52, 0x02, 0x55, 0x53, 0x52, 0x02, 0x55, 0x59, 0x52,
	0x02, 0x55, 0x5a, 0x52, 0x02, 0x56, 0x41, 0x52, 0x02, 0x56, 0x43, 0x52, 0x02, 0x56, 0x45, 0x52,
	0x02, 0x56, 0x47, 0x52, 0x02, 0x56, 0x49, 0x52, 0x02, 0x56, 0x4e, 0x52, 0x02, 0x56, 0x55, 0x52,
	0x02, 0x57, 0x46, 0x52, 0x02, 0x57, 0x53, 0x52, 0x02, 0x59, 0x45, 0x52, 0x02, 0x59, 0x54, 0x52,
	0x02, 0x5a, 0x41, 0x52, 0x02, 0x5a, 0x4d, 0x52, 0x02, 0x5a, 0x57, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x2f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd0, 0x09, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x28, 0x80, 0x02, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72,
	0x06, 0x28, 0x80, 0x02, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x28, 0x80, 0x02, 0xd0, 0x01, 0x01,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0xd0, 0x01, 0x01, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x89, 0x08, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xee,
	0x07, 0xfa, 0x42, 0xea, 0x07, 0x72, 0xe7, 0x07, 0x52, 0x02, 0x41, 0x44, 0x52, 0x02, 0x41, 0x45,
	0x52, 0x02, 0x41, 0x46, 0x52, 0x02, 0x41, 0x47, 0x52, 0x02, 0x41, 0x49, 0x52, 0x02, 0x41, 0x4c,
	0x52, 0x02, 0x41, 0x4d, 0x52, 0x02, 0x41, 0x4f, 0x52, 0x02, 0x41, 0x51, 0x52, 0x02, 0x41, 0x52,
	0x52, 0x02, 0x41, 0x53, 0x52, 0x02, 0x41, 0x54, 0x52, 0x02, 0x41, 0x55, 0x52, 0x02, 0x41, 0x57,
	0x52, 0x02, 0x41, 0x58, 0x52, 0x02, 0x41, 0x5a, 0x52, 0x02, 0x42, 0x41, 0x52, 0x02, 0x42, 0x42,
	0x52, 0x02, 0x42, 0x44, 0x52, 0x02, 0x42, 0x45, 0x52, 0x02, 0x42, 0x46, 0x52, 0x02, 0x42, 0x47,
	0x52, 0x02, 0x42, 0x48, 0x52, 0x02, 0x42, 0x49, 0x52, 0x02, 0x42, 0x4a, 0x52, 0x02, 0x42, 0x4c,
	0x52, 0x02, 0x42, 0x4d, 0x52, 0x02, 0x42, 0x4e, 0x52, 0x02, 0x42, 0x4f, 0x52, 0x02, 0x42, 0x51,
	0x52, 0x02, 0x42, 0x52, 0x52, 0x02, 0x42, 0x53, 0x52, 0x02, 0x42, 0x54, 0x52, 0x02, 0x42, 0x56,
	0x52, 0x02, 0x42, 0x57, 0x52, 0x02, 0x42, 0x59, 0x52, 0x02, 0x42, 0x5a, 0x52, 0x02, 0x43, 0x41,
	0x52, 0x02, 0x43, 0x43, 0x52, 0x02, 0x43, 0x44, 0x52, 0x02, 0x43, 0x46, 0x52, 0x02, 0x43, 0x47,
	0x52, 0x02, 0x43, 0x48, 0x52, 0x02, 0x43, 0x49, 0x52, 0x02, 0x43, 0x4b, 0x52, 0x02, 0x43, 0x4c,
	0x52, 0x02, 0x43, 0x4d, 0x52, 0x02, 0x43, 0x4e, 0x52, 0x02, 0x43, 0x4f, 0x52, 0x02, 0x43, 0x52,
	0x52, 0x02, 0x43, 0x55, 0x52, 0x02, 0x43, 0x56, 0x52, 0x02, 0x43, 0x57, 0x52, 0x02, 0x43, 0x58,
	0x52, 0x02, 0x43, 0x59, 0x52, 0x02, 0x43, 0x5a, 0x52, 0x02, 0x44, 0x45, 0x52, 0x02, 0x44, 0x4a,
	0x52, 0x02, 0x44, 0x4b, 0x52, 0x02, 0x44, 0x4d, 0x52, 0x02, 0x44, 0x4f, 0x52, 0x02, 0x44, 0x5a,
	0x52, 0x02, 0x45, 0x43, 0x52, 0x02, 0x45, 0x45, 0x52, 0x02, 0x45, 0x47, 0x52, 0x02, 0x45, 0x48,
	0x52, 0x02, 0x45, 0x52, 0x52, 0x02, 0x45, 0x53, 0x52, 0x02, 0x45, 0x54, 0x52, 0x02, 0x46, 0x49,
	0x52, 0x02, 0x46, 0x4a, 0x52, 0x02, 0x46, 0x4b, 0x52, 0x02, 0x46, 0x4d, 0x52, 0x02, 0x46, 0x4f,
	0x52, 0x02, 0x46, 0x52, 0x52, 0x02, 0x47, 0x41, 0x52, 0x02, 0x47, 0x42, 0x52, 0x02, 0x47, 0x44,
	0x52, 0x02, 0x47, 0x45, 0x52, 0x02, 0x47, 0x46, 0x52, 0x02, 0x47, 0x47, 0x52, 0x02, 0x47, 0x48,
	0x52, 0x02, 0x47, 0x49, 0x52, 0x02, 0x47, 0x4c, 0x52, 0x02, 0x47, 0x4d, 0x52, 0x02, 0x47, 0x4e,
	0x52, 0x02, 0x47, 0x50, 0x52, 0x02, 0x47, 0x51, 0x52, 0x02, 0x47, 0x52, 0x52, 0x02, 0x47, 0x53,
	0x52, 0x02, 0x47, 0x54, 0x52, 0x02, 0x47, 0x55, 0x52, 0x02, 0x47, 0x57, 0x52, 0x02, 0x47, 0x59,
	0x52, 0x02, 0x48, 0x4b, 0x52, 0x02, 0x48, 0x4d, 0x52, 0x02, 0x48, 0x4e, 0x52, 0x02, 0x48, 0x52,
	0x52, 0x02, 0x48, 0x54, 0x52, 0x02, 0x48, 0x55, 0x52, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x45,
	0x52, 0x02, 0x49, 0x4c, 0x52, 0x02, 0x49, 0x4d, 0x52, 0x02, 0x49, 0x4e, 0x52, 0x02, 0x49, 0x4f,
	0x52, 0x02, 0x49, 0x51, 0x52, 0x02, 0x49, 0x52, 0x52, 0x02, 0x49, 0x53, 0x52, 0x02, 0x49, 0x54,
	0x52, 0x02, 0x4a, 0x45, 0x52, 0x02, 0x4a, 0x4d, 0x52, 0x02, 0x4a, 0x4f, 0x52, 0x02, 0x4a, 0x50,
	0x52, 0x02, 0x4b, 0x45, 0x52, 0x02, 0x4b, 0x47, 0x52, 0x02, 0x4b, 0x48, 0x52, 0x02, 0x4b, 0x49,
	0x52, 0x02, 0x4b, 0x4d, 0x52, 0x02, 0x4b, 0x4e, 0x52, 0x02, 0x4b, 0x50, 0x52, 0x02, 0x4b, 0x52,
	0x52, 0x02, 0x4b, 0x57, 0x52, 0x02, 0x4b, 0x59, 0x52, 0x02, 0x4b, 0x5a, 0x52, 0x02, 0x4c, 0x41,
	0x52, 0x02, 0x4c, 0x42, 0x52, 0x02, 0x4c, 0x43, 0x52, 0x02, 0x4c, 0x49, 0x52, 0x02, 0x4c, 0x4b,
	0x52, 0x02, 0x4c, 0x52, 0x52, 0x02, 0x4c, 0x53, 0x52, 0x02, 0x4c, 0x54, 0x52, 0x02, 0x4c, 0x55,
	0x52, 0x02, 0x4c, 0x56, 0x52, 0x02, 0x4c, 0x59, 0x52, 0x02, 0x4d, 0x41, 0x52, 0x02, 0x4d, 0x43,
	0x52, 0x02, 0x4d, 0x44, 0x52, 0x02, 0x4d, 0x45, 0x52, 0x02, 0x4d, 0x46, 0x52, 0x02, 0x4d, 0x47,
	0x52, 0x02, 0x4d, 0x48, 0x52, 0x02, 0x4d, 0x4b, 0x52, 0x02, 0x4d, 0x4c, 0x52, 0x02, 0x4d, 0x4d,
	0x52, 0x02, 0x4d, 0x4e, 0x52, 0x02, 0x4d, 0x4f, 0x52, 0x02, 0x4d, 0x50, 0x52, 0x02, 0x4d, 0x51,
	0x52, 0x02, 0x4d, 0x52, 0x52, 0x02, 0x4d, 0x53, 0x52, 0x02, 0x4d, 0x54, 0x52, 0x02, 0x4d, 0x55,
	0x52, 0x02, 0x4d, 0x56, 0x52, 0x02, 0x4d, 0x57, 0x52, 0x02, 0x4d, 0x58, 0x52, 0x02, 0x4d, 0x59,
	0x52, 0x02, 0x4d, 0x5a, 0x52, 0x02, 0x4e, 0x41, 0x52, 0x02, 0x4e, 0x43, 0x52, 0x02, 0x4e, 0x45,
	0x52, 0x02, 0x4e, 0x46, 0x52, 0x02, 0x4e, 0x47, 0x52, 0x02, 0x4e, 0x49, 0x52, 0x02, 0x4e, 0x4c,
	0x52, 0x02, 0x4e, 0x4f, 0x52, 0x02, 0x4e, 0x50, 0x52, 0x02, 0x4e, 0x52, 0x52, 0x02, 0x4e, 0x55,
	0x52, 0x02, 0x4e, 0x5a, 0x52, 0x02, 0x4f, 0x4d, 0x52, 0x02, 0x50, 0x41, 0x52, 0x02, 0x50, 0x45,
	0x52, 0x02, 0x50, 0x46, 0x52, 0x02, 0x50, 0x47, 0x52, 0x02, 0x50, 0x48, 0x52, 0x02, 0x50, 0x4b,
	0x52, 0x02, 0x50, 0x4c, 0x52, 0x02, 0x50, 0x4d, 0x52, 0x02, 0x50, 0x4e, 0x52, 0x02, 0x50, 0x52,
	0x52, 0x02, 0x50, 0x53, 0x52, 0x02, 0x50, 0x54, 0x52, 0x02, 0x50, 0x57, 0x52, 0x02, 0x50, 0x59,
	0x52, 0x02, 0x51, 0x41, 0x52, 0x02, 0x52, 0x45, 0x52, 0x02, 0x52, 0x4f, 0x52, 0x02, 0x52, 0x53,
	0x52, 0x02, 0x52, 0x55, 0x52, 0x02, 0x52, 0x57, 0x52, 0x02, 0x53, 0x41, 0x52, 0x02, 0x53, 0x42,
	0x52, 0x02, 0x53, 0x43, 0x52, 0x02, 0x53, 0x44, 0x52, 0x02, 0x53, 0x45, 0x52, 0x02, 0x53, 0x47,
	0x52, 0x02, 0x53, 0x48, 0x52, 0x02, 0x53, 0x49, 0x52, 0x02, 0x53, 0x4a, 0x52, 0x02, 0x53, 0x4b,
	0x52, 0x02, 0x53, 0x4c, 0x52, 0x02, 0x53, 0x4d, 0x52, 0x02, 0x53, 0x4e, 0x52, 0x02, 0x53, 0x4f,
	0x52, 0x02, 0x53, 0x52, 0x52, 0x02, 0x53, 0x53, 0x52, 0x02, 0x53, 0x54, 0x52, 0x02, 0x53, 0x56,
	0x52, 0x02, 0x53, 0x58, 0x52, 0x02, 0x53, 0x59, 0x52, 0x02, 0x53, 0x5a, 0x52, 0x02, 0x54, 0x43,
	0x52, 0x02, 0x54, 0x44, 0x52, 0x02, 0x54, 0x46, 0x52, 0x02, 0x54, 0x47, 0x52, 0x02, 0x54, 0x48,
	0x52, 0x02, 0x54, 0x4a, 0x52, 0x02, 0x54, 0x4b, 0x52, 0x02, 0x54, 0x4c, 0x52, 0x02, 0x54, 0x4d,
	0x52, 0x02, 0x54, 0x4e, 0x52, 0x02, 0x54, 0x4f, 0x52, 0x02, 0x54, 0x52, 0x52, 0x02, 0x54, 0x54,
	0x52, 0x02, 0x54, 0x56, 0x52, 0x02, 0x54, 0x57, 0x52, 0x02, 0x54, 0x5a, 0x52, 0x02, 0x55, 0x41,
	0x52, 0x02, 0x55, 0x47, 0x52, 0x02, 0x55, 0x4d, 0x52, 0x02, 0x55, 0x53, 0x52, 0x02, 0x55, 0x59,
	0x52, 0x02, 0x55, 0x5a, 0x52, 0x02, 0x56, 0x41, 0x52, 0x02, 0x56, 0x43, 0x52, 0x02, 0x56, 0x45,
	0x52, 0x02, 0x56, 0x47, 0x52, 0x02, 0x56, 0x49, 0x52, 0x02, 0x56, 0x4e, 0x52, 0x02, 0x56, 0x55,
	0x52, 0x02, 0x57, 0x46, 0x52, 0x02, 0x57, 0x53, 0x52, 0x02, 0x59, 0x45, 0x52, 0x02, 0x59, 0x54,
	0x52, 0x02, 0x5a, 0x41, 0x52, 0x02, 0x5a, 0x4d, 0x52, 0x02, 0x5a, 0x57, 0xd0, 0x01, 0x01, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x2f, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x11, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x14, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x30, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32, 0xc2, 0x02,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22,
	0x09, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x1a, 0x0e, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x4d, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x45, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x42, 0x36, 0x42, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x62,
	0x72, 0x6f, 0x67, 0x67, 0x69, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x69, 0x74, 0x74, 0x68, 0x61, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_user_proto_goTypes = []interface{}{
	(*User)(nil),                  // 0: User
	(*UserEvent)(nil),             // 1: UserEvent
	(*CreateUserRequest)(nil),     // 2: CreateUserRequest
	(*CreateUserResponse)(nil),    // 3: CreateUserResponse
	(*UpdateUserRequest)(nil),     // 4: UpdateUserRequest
	(*UpdateUserResponse)(nil),    // 5: UpdateUserResponse
	(*RemoveUserRequest)(nil),     // 6: RemoveUserRequest
	(*RemoveUserResponse)(nil),    // 7: RemoveUserResponse
	(*ListUsersRequest)(nil),      // 8: ListUsersRequest
	(*ListUsersResponse)(nil),     // 9: ListUsersResponse
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_user_proto_depIdxs = []int32{
	10, // 0: User.created_at:type_name -> google.protobuf.Timestamp
	10, // 1: User.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: UserEvent.before:type_name -> User
	0,  // 3: UserEvent.after:type_name -> User
	0,  // 4: CreateUserResponse.user:type_name -> User
	0,  // 5: UpdateUserResponse.user:type_name -> User
	10, // 6: ListUsersRequest.created_after:type_name -> google.protobuf.Timestamp
	10, // 7: ListUsersRequest.created_before:type_name -> google.protobuf.Timestamp
	0,  // 8: ListUsersResponse.users:type_name -> User
	2,  // 9: UserService.CreateUser:input_type -> CreateUserRequest
	4,  // 10: UserService.UpdateUser:input_type -> UpdateUserRequest
	6,  // 11: UserService.RemoveUser:input_type -> RemoveUserRequest
	8,  // 12: UserService.ListUsers:input_type -> ListUsersRequest
	3,  // 13: UserService.CreateUser:output_type -> CreateUserResponse
	5,  // 14: UserService.UpdateUser:output_type -> UpdateUserResponse
	7,  // 15: UserService.RemoveUser:output_type -> RemoveUserResponse
	9,  // 16: UserService.ListUsers:output_type -> ListUsersResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}
