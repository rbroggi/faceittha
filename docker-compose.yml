
version: '3.8'
services:
  db:
    image: mongo
    restart: always
    networks:
      - test
    volumes:
      - ./db/config/keyfile:/opt/keyfile/keyfile:ro
#      - ./db/init.js:/docker-entrypoint-initdb.d/init.js:ro
    environment:
      PUID: 1000
      PGID: 1000
      MONGODB_REPLICA_SET_MODE: primary
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: mongopwd
      MONGO_INITDB_DATABASE: faceittha
      MONGODB_ADVERTISED_HOSTNAME: localhost
    healthcheck:
      test: |
        test $$(mongosh --quiet -u mongouser -p mongopwd --eval "try { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'db' }] }).ok } catch (_) { rs.status().ok }") -eq 1
      interval: 10s
      start_period: 30s
    command: ["--replSet", "rs0", "--keyFile", "/opt/keyfile/keyfile", "--bind_ip_all"]

  pubsub:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:latest
    networks:
      - test
    command:
      - gcloud 
      - beta 
      - emulators 
      - pubsub 
      - start 
      - --project=faceittha
      - --host-port=0.0.0.0:8085

  pubsubsetup:
    image: golang:1.20
    networks:
      - test
    depends_on:
      - pubsub
    volumes:
      - .:/go/src/app
    working_dir: /go/src/app
    environment:
      - PUBSUB_EMULATOR_HOST=pubsub:8085
      - CGO_ENABLED=0
    command:
      - /bin/bash
      - -c
      - |
        echo "wating pubsub to be ready..."
        go run -mod=vendor ./cmd/waitfor/main.go -host=pubsub -port=8085 || exit 1
        echo "setup pubsub topics and subscriptions"
        go run -mod=vendor ./cmd/pubsubsetup/main.go "faceittha,cdc.faceittha.users:worker.cdc.faceittha.users.sub,shared.faceittha.UserEvents:test.shared.facittha.UserEvents.sub" || exit 1
        echo "dependencies configured, up and running"

  debezium:
    image: debezium/server:2.3
    depends_on:
      pubsubsetup:
        condition: service_completed_successfully
    networks:
      - test
    environment:
      - QUARKUS_LOG_LEVEL=DEBUG
      - DEBEZIUM_SINK_TYPE=pubsub
      - DEBEZIUM_SINK_PUBSUB_PROJECT_ID=faceittha
      - DEBEZIUM_SINK_PUBSUB_ADDRESS=pubsub:8085
      - DEBEZIUM_SINK_EMULATOR_HOST=pubsub:8085
      - PUBSUB_EMULATOR_HOST=pubsub:8085
      - DEBEZIUM_SOURCE_CONNECTOR_CLASS=io.debezium.connector.mongodb.MongoDbConnector
      - DEBEZIUM_SOURCE_MONGODB_CONNECTION_STRING=mongodb://mongouser:mongopwd@db:27017/faceittha?authSource=admin&readPreference=primary&ssl=false&replicaSet=rs0
      - DEBEZIUM_SOURCE_OFFSET_STORAGE_FILE_FILENAME=data/offsets.dat
      - DEBEZIUM_SOURCE_OFFSET_FLUSH_INTERVAL_MS=0
      - DEBEZIUM_SOURCE_TOPIC_PREFIX=cdc
      - DEBEZIUM_SOURCE_CAPTURE_MODE=change_streams_update_full_with_pre_image
      - DEBEZIUM_SOURCE_COLLECTION_INCLUDE_LIST=faceittha.users
      - DEBEZIUM_SOURCE_TOMBSTONES_ON_DELETE=false

  test:
    image: golang:1.20
    networks:
      - test
    depends_on:
      - db
      - debezium
    volumes:
      - .:/go/src/app
    working_dir: /go/src/app
    environment:
      - MONGODB_URL=mongodb://mongouser:mongopwd@db:27017/faceittha?authSource=admin&readPreference=primary&ssl=false&replicaSet=rs0
      - PUBSUB_EMULATOR_HOST=pubsub:8085
      - GOCOVERDIR=coverage
      - CGO_ENABLED=0
    command: 
      - /bin/bash
      - -c
      - |
        mkdir -p coverage
        rm -r coverage/*

        echo "building binaries with coverage support..."
        go build -buildvcs=false -cover -o ./bin/servercvg ./cmd/server || exit 1
        go build -buildvcs=false -cover -o ./bin/waitforcvg ./cmd/waitfor || exit 1
        go build -buildvcs=false -cover -o ./bin/migratecvg ./cmd/migrate || exit 1
        go build -buildvcs=false -cover -o ./bin/pubsubsetupcvg ./cmd/pubsubsetup || exit 1
        go build -buildvcs=false -cover -o ./bin/workercvg ./cmd/worker || exit 1

        echo "wating db to be ready..."
        ./bin/waitforcvg -host=db -port=27017 || exit 1
        echo "wating pubsub to be ready..."
        ./bin/waitforcvg -host=pubsub -port=8085 || exit 1

        echo "setup database by running migrations"
        ./bin/migratecvg || exit 1

        echo "setup pubusub - creationg of topics and subscriptions"
        ./bin/pubsubsetupcvg "faceittha,cdc.faceittha.users:worker.cdc.faceittha.users.sub,shared.faceittha.UserEvents:test.shared.facittha.UserEvents.sub" || exit 1

        echo "starting unit-tests"
        go test -cover ./... -args -test.gocoverdir="$$PWD/coverage" || exit 1
        echo "tests passed"

        echo "starting server"
        ./bin/servercvg &> /tmp/server.log &
        serverPID=$$(echo $$!)
        echo "server PID: $$serverPID"

        echo "starting worker"
        ./bin/workercvg &> /tmp/worker.log &
        workerPID=$$(echo $$!)
        echo "worker PID: $$workerPID"
        echo "wating server to be ready..."
        ./bin/waitforcvg -host=localhost -port=50051 || exit 1
        echo "wating worker to be ready..."
        ./bin/waitforcvg -host=localhost -port=50052 || exit 1

        echo "starting component tests..."
        go test -v -tags=component ./tests/component || exit 1

        echo "stop server"
        kill $${serverPID}
        echo "stop worker"
        kill $${workerPID}

        echo "waiting for server to stop"
        wait $${serverPID}
        echo "waiting for worker to stop"
        wait $${workerPID}

        sleep 5
        
        go tool covdata percent -i=./coverage
        mkdir coverage/merged
        go tool covdata merge -i=coverage -o coverage/merged
        go tool covdata textfmt -i=coverage/merged -o=coverage/merged/report.out


networks:
  test: